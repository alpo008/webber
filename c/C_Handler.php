<?phpnamespace c;use m\M_Params;use m\M_PDO;/** * Обработчик AJAX-запросов * @property array|null $params */class C_Handler{    /**     * Переопределение род. метода отработки запроса     * @param string $action     * @param array|null $params     */    public function Request($action, $params = null)    {        $this->params = $params;        $this->$action();    }    /**     * Добавление случайного круга     */    public function action_create()    {        $user_id = (isset($_POST['uid'])) ? $_POST['uid'] : NULL;        $code = 400;        $message = 'NOK';        $html = null;        if (!!$user_id) {            $params = M_Params::Instance()->randomParams();            $circle = M_Params::Instance()->randomCircle($params);            $params['user_id'] = $user_id;            $result = M_PDO::Instance()->Insert('circles', $params);            if (preg_match("/[0-9]+/", $result)) {                $code = 200;                $message = 'OK';                $html = $circle;            }        }        echo json_encode(compact('code', 'message', 'html'));    }    /**     * Удаление всех кругов     */    public function action_delete()    {        $user_id = (isset($_POST['uid'])) ? $_POST['uid'] : NULL;        $code = 400;        $message = 'NOT DELETED';        $html = null;        if (!!$user_id) {            $where = 'user_id =' . $user_id;            $result = M_PDO::Instance()->Delete('circles', $where);            if ($result !== 0){                $code = 200;                $message = 'OK';                $html = null;            }        }        echo json_encode(compact('code', 'message', 'html'));    }    /**     * Подсчет соприкасающихся кругов     */    public function action_count()    {        $user_id = (isset($_POST['uid'])) ? $_POST['uid'] : NULL;        $count = M_Params::Instance()->countTouchings($user_id);        echo json_encode(compact('count'));    }}